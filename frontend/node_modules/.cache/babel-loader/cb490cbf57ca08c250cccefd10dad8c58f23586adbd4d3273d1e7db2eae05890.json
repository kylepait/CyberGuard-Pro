{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";function DevHub(){const[assignedModules,setAssignedModules]=useState([]);const[completedModules,setCompletedModules]=useState([]);const[allTrainings,setAllTrainings]=useState([]);const[trainingAssignments,setTrainingAssignments]=useState([]);const user=JSON.parse(localStorage.getItem('user'));const[selectedEmployee,setSelectedEmployee]=useState('');const[selectedModule,setSelectedModule]=useState('');const[employees,setEmployees]=useState([]);const[badges,setBadges]=useState([]);const[loading,setLoading]=useState(true);const enrollEmployeeInTraining=async()=>{const response=await fetch('http://localhost:4000/enroll-employee-training',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({employeeUserId:selectedEmployee,moduleId:selectedModule})});const data=await response.json();if(data.success){alert('Employee enrolled successfully!');// Optionally: Refresh the list of enrolled trainings\nfetchTrainingAssignments();// Call this function to refresh assignments\n}else{alert('Failed to enroll employee.');}};useEffect(()=>{fetchAllTrainings();if(user.user_role==='management'){fetchTrainingAssignments();}fetchTrainingModules();const fetchEmployees=async()=>{if(user.user_role==='management'){const url=\"http://localhost:4000/employees/organization/\".concat(user.organization_id);// Updated URL to match the new endpoint\nconst response=await fetch(url);const data=await response.json();setEmployees(data);}};fetchEmployees();const fetchBadges=async()=>{try{const response=await fetch(\"http://localhost:4000/badges?user_id=\".concat(user.user_id));const data=await response.json();setBadges(data);}catch(error){console.error('Error fetching badges:',error);}};// New function to fetch badges of employees within the manager's organization\nconst fetchEmployeeBadges=async()=>{try{const response=await fetch(\"http://localhost:4000/badges/organization/\".concat(user.organization_id));const data=await response.json();setEmployees(data);// Assuming the endpoint returns structured data as discussed\nsetLoading(false);// Set loading to false after fetching data\n}catch(error){console.error('Error fetching employee badges:',error);setLoading(false);// Ensure loading is set to false even if there is an error\n}};// Call fetchBadges for all users\nfetchBadges();fetchEmployeeBadges();},[user.user_id,user.user_role,user.organization_id]);// Declare fetchAllTrainings outside useEffect\nconst fetchAllTrainings=async()=>{const response=await fetch('http://localhost:4000/all-trainings');const data=await response.json();setAllTrainings(data);};const fetchTrainingAssignments=async()=>{const response=await fetch(\"http://localhost:4000/training-assignments/\".concat(user.organization_id));const data=await response.json();setTrainingAssignments(data);};const fetchTrainingModules=async()=>{const response=await fetch(\"http://localhost:4000/user-training-modules?userId=\".concat(user.user_id));const data=await response.json();setAssignedModules(data.assignedModules);setCompletedModules(data.completedModules);};return/*#__PURE__*/_jsx(\"div\",{style:{padding:'20px'},children:/*#__PURE__*/_jsx(\"h2\",{style:{borderBottom:'25px solid #17a2b8',paddingBottom:'10px'},children:\"Developer Hub\"})});}export default DevHub;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","DevHub","assignedModules","setAssignedModules","completedModules","setCompletedModules","allTrainings","setAllTrainings","trainingAssignments","setTrainingAssignments","user","JSON","parse","localStorage","getItem","selectedEmployee","setSelectedEmployee","selectedModule","setSelectedModule","employees","setEmployees","badges","setBadges","loading","setLoading","enrollEmployeeInTraining","response","fetch","method","headers","body","stringify","employeeUserId","moduleId","data","json","success","alert","fetchTrainingAssignments","fetchAllTrainings","user_role","fetchTrainingModules","fetchEmployees","url","concat","organization_id","fetchBadges","user_id","error","console","fetchEmployeeBadges","style","padding","children","borderBottom","paddingBottom"],"sources":["C:/Users/Kyle/Desktop/CyberGuard Pro/CyberGuard-Pro/frontend/src/components/dev_hub.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction DevHub() {\r\n  const [assignedModules, setAssignedModules] = useState([]);\r\n  const [completedModules, setCompletedModules] = useState([]);\r\n\r\n  const [allTrainings, setAllTrainings] = useState([]);\r\n\r\n  const [trainingAssignments, setTrainingAssignments] = useState([]);\r\n\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n\r\n  const [selectedEmployee, setSelectedEmployee] = useState('');\r\n  const [selectedModule, setSelectedModule] = useState('');\r\n\r\n  const [employees, setEmployees] = useState([]);\r\n\r\n  \r\n\r\n  const [badges, setBadges] = useState([]);\r\n  \r\n  const [loading, setLoading] = useState(true);\r\n  \r\n\r\n  const enrollEmployeeInTraining = async () => {\r\n      const response = await fetch('http://localhost:4000/enroll-employee-training', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ employeeUserId: selectedEmployee, moduleId: selectedModule })\r\n      });\r\n      const data = await response.json();\r\n      if (data.success) {\r\n          alert('Employee enrolled successfully!');\r\n          // Optionally: Refresh the list of enrolled trainings\r\n          fetchTrainingAssignments(); // Call this function to refresh assignments\r\n\r\n      } else {\r\n          alert('Failed to enroll employee.');\r\n      }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n      fetchAllTrainings();\r\n    \r\n      if (user.user_role === 'management') {\r\n        fetchTrainingAssignments();\r\n      }\r\n      fetchTrainingModules();\r\n\r\n      const fetchEmployees = async () => {\r\n        if (user.user_role === 'management') {\r\n          const url = `http://localhost:4000/employees/organization/${user.organization_id}`; // Updated URL to match the new endpoint\r\n          const response = await fetch(url);\r\n          const data = await response.json();\r\n          setEmployees(data);\r\n        }\r\n      };\r\n      \r\n      fetchEmployees();\r\n\r\n\r\n\r\n      const fetchBadges = async () => {\r\n        try {\r\n          const response = await fetch(`http://localhost:4000/badges?user_id=${user.user_id}`);\r\n          const data = await response.json();\r\n          setBadges(data);\r\n        } catch (error) {\r\n          console.error('Error fetching badges:', error);\r\n        }\r\n      };\r\n    \r\n      // New function to fetch badges of employees within the manager's organization\r\n      const fetchEmployeeBadges = async () => {\r\n        try {\r\n          const response = await fetch(`http://localhost:4000/badges/organization/${user.organization_id}`);\r\n          const data = await response.json();\r\n          setEmployees(data); // Assuming the endpoint returns structured data as discussed\r\n          setLoading(false); // Set loading to false after fetching data\r\n        } catch (error) {\r\n          console.error('Error fetching employee badges:', error);\r\n          setLoading(false); // Ensure loading is set to false even if there is an error\r\n        }\r\n      };\r\n    \r\n      // Call fetchBadges for all users\r\n      fetchBadges();\r\n    \r\n      \r\n      \r\n        fetchEmployeeBadges();\r\n\r\n\r\n\r\n\r\n\r\n    }, [user.user_id, user.user_role, user.organization_id]);\r\n\r\n\r\n  // Declare fetchAllTrainings outside useEffect\r\n  const fetchAllTrainings = async () => {\r\n    const response = await fetch('http://localhost:4000/all-trainings'); \r\n    const data = await response.json();\r\n    setAllTrainings(data);\r\n  };\r\n\r\n\r\n\r\n  const fetchTrainingAssignments = async () => {\r\n    const response = await fetch(`http://localhost:4000/training-assignments/${user.organization_id}`);\r\n    const data = await response.json();\r\n    setTrainingAssignments(data);\r\n  };\r\n\r\n  const fetchTrainingModules = async () => {\r\n    const response = await fetch(`http://localhost:4000/user-training-modules?userId=${user.user_id}`);\r\n    const data = await response.json();\r\n    setAssignedModules(data.assignedModules);\r\n    setCompletedModules(data.completedModules);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n\r\n        <h2 style={{ borderBottom: '25px solid #17a2b8', paddingBottom: '10px' }}>Developer Hub</h2>\r\n  \r\n\r\n\r\n\r\n            \r\n\r\n  \r\n      \r\n\r\n    </div>\r\n\r\n    \r\n  );\r\n}\r\n\r\nexport default DevHub;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}