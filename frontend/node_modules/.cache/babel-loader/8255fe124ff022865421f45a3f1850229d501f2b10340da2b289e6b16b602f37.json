{"ast":null,"code":"import React,{useState,useEffect}from'react';import questions from'./questions.json';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const TriviaGame=()=>{const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[score,setScore]=useState(0);const[showScore,setShowScore]=useState(false);const user=JSON.parse(localStorage.getItem('user'));const awardPerfectScoreBadge=async()=>{const badgeId='10';try{const response=await fetch('http://localhost:4000/add-badge',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:user.user_id,badgeId})});const data=await response.json();if(!data.success){console.error('Failed to award perfect score badge.');}}catch(error){console.error('Error awarding perfect score badge:',error);}};const handleAnswerOptionClick=isCorrect=>{if(isCorrect){setScore(score+1);}const nextQuestion=currentQuestionIndex+1;if(nextQuestion<questions.length){setCurrentQuestionIndex(nextQuestion);}else{setShowScore(true);if(score+1===questions.length){// Plus one because we haven't updated the state yet\nawardPerfectScoreBadge();}}};return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:showScore?/*#__PURE__*/_jsxs(\"div\",{className:\"score-section\",children:[\"You scored \",score,\" out of \",questions.length,/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),children:\"Play Again\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-count\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Question \",currentQuestionIndex+1]}),\"/\",questions.length]}),/*#__PURE__*/_jsx(\"div\",{className:\"question-text\",children:questions[currentQuestionIndex].question})]}),/*#__PURE__*/_jsx(\"div\",{className:\"answer-section\",children:questions[currentQuestionIndex].options.map((option,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAnswerOptionClick(option===questions[currentQuestionIndex].answer),children:option},index))})]})});};export default TriviaGame;","map":{"version":3,"names":["React","useState","useEffect","questions","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TriviaGame","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","showScore","setShowScore","user","JSON","parse","localStorage","getItem","awardPerfectScoreBadge","badgeId","response","fetch","method","headers","body","stringify","userId","user_id","data","json","success","console","error","handleAnswerOptionClick","isCorrect","nextQuestion","length","className","children","onClick","window","location","reload","question","options","map","option","index","answer"],"sources":["C:/Users/Kyle/Desktop/CyberGuard Pro/CyberGuard-Pro/frontend/src/components/triviaGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport questions from './questions.json';\r\n\r\nconst TriviaGame = () => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n  const awardPerfectScoreBadge = async () => {\r\n    const badgeId = '10'; \r\n    try {\r\n      const response = await fetch('http://localhost:4000/add-badge', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ userId: user.user_id, badgeId }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (!data.success) {\r\n        console.error('Failed to award perfect score badge.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error awarding perfect score badge:', error);\r\n    }\r\n  };\r\n\r\n  const handleAnswerOptionClick = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    const nextQuestion = currentQuestionIndex + 1;\r\n    if (nextQuestion < questions.length) {\r\n      setCurrentQuestionIndex(nextQuestion);\r\n    } else {\r\n      setShowScore(true);\r\n      if (score + 1 === questions.length) { // Plus one because we haven't updated the state yet\r\n        awardPerfectScoreBadge();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='app'>\r\n      {showScore ? (\r\n        <div className='score-section'>\r\n          You scored {score} out of {questions.length}\r\n          <button onClick={() => window.location.reload()}>Play Again</button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className='question-section'>\r\n            <div className='question-count'>\r\n              <span>Question {currentQuestionIndex + 1}</span>/{questions.length}\r\n            </div>\r\n            <div className='question-text'>{questions[currentQuestionIndex].question}</div>\r\n          </div>\r\n          <div className='answer-section'>\r\n            {questions[currentQuestionIndex].options.map((option, index) => (\r\n              <button key={index} onClick={() => handleAnswerOptionClick(option === questions[currentQuestionIndex].answer)}>\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TriviaGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}